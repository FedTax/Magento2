name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'sandbox'
        type: choice
        options:
        - sandbox
        - staging
        - production
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
        type: string
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  MODULE_NAME: Taxcloud_Magento2
  MODULE_PATH: app/code/Taxcloud/Magento2

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: !inputs.skip_tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch }}
        
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: soap, dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: none
        
    - name: Install dependencies
      run: |
        composer install --no-dev --optimize-autoloader
        
    - name: Run integration tests
      run: |
        php Test/Integration/PostalCodeParserTest.php
        php Test/Integration/RefundTest.php
        php Test/Integration/ComprehensiveRefundTest.php
        php Test/Integration/FailureCaseTest.php
        php Test/Integration/FallbackToMagentoTest.php
        php Test/Integration/AdobeCommerce248p1CompatibilityTest.php

  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || inputs.skip_tests || inputs.force_deploy)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch }}
        
    - name: Create deployment package
      run: |
        # Create a clean deployment package
        mkdir -p deployment-package
        cp -r . deployment-package/
        cd deployment-package
        
        # Remove unnecessary files for deployment
        rm -rf .git
        rm -rf .github
        rm -rf Test/
        rm -rf docs/
        rm -rf .gitignore
        rm -rf Makefile
        rm -rf run-test.sh
        rm -rf README.md
        rm -rf LICENSE.txt
        rm -rf scripts/
        
        # Create deployment archive
        tar -czf ../taxcloud-magento2-deployment.tar.gz .
        cd ..
        
    - name: Deploy via SFTP
      uses: SamKirkland/FTP-Deploy-Action@4.3.4
      with:
        server: ${{ secrets[format('SFTP_HOST_{0}', inputs.environment)] }}
        username: ${{ secrets[format('SFTP_USERNAME_{0}', inputs.environment)] }}
        ssh-private-key: ${{ secrets[format('SSH_PRIVATE_KEY_{0}', inputs.environment)] }}
        port: ${{ secrets[format('SFTP_PORT_{0}', inputs.environment)] || '22' }}
        local-dir: './deployment-package/'
        server-dir: '/${{ secrets[format('MAGENTO_ROOT_PATH_{0}', inputs.environment)] }}/${{ env.MODULE_PATH }}/'
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/.DS_Store
          **/Thumbs.db
          **/.vscode/**
          **/Test/**
          **/docs/**
          **/.github/**
          **/Makefile
          **/run-test.sh
          **/README.md
          **/LICENSE.txt
          **/scripts/**
          
    - name: Execute Magento Commands
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets[format('SFTP_HOST_{0}', inputs.environment)] }}
        username: ${{ secrets[format('SFTP_USERNAME_{0}', inputs.environment)] }}
        key: ${{ secrets[format('SSH_PRIVATE_KEY_{0}', inputs.environment)] }}
        port: ${{ secrets[format('SFTP_PORT_{0}', inputs.environment)] || '22' }}
        script: |
          cd ${{ secrets[format('MAGENTO_ROOT_PATH_{0}', inputs.environment)] }}
          
          # Set proper permissions
          chmod -R 755 ${{ env.MODULE_PATH }}
          chown -R ${{ secrets[format('WEB_USER_{0}', inputs.environment)] }}:${{ secrets[format('WEB_GROUP_{0}', inputs.environment)] }} ${{ env.MODULE_PATH }}
          
          # Enable module if not already enabled
          bin/magento module:enable ${{ env.MODULE_NAME }}
          
          # Run Magento setup commands
          bin/magento setup:upgrade
          bin/magento setup:di:compile
          bin/magento setup:static-content:deploy -f
          bin/magento cache:clean
          bin/magento cache:flush
          
          # Verify module is enabled
          bin/magento module:status ${{ env.MODULE_NAME }}
          
    - name: Verify Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets[format('SFTP_HOST_{0}', inputs.environment)] }}
        username: ${{ secrets[format('SFTP_USERNAME_{0}', inputs.environment)] }}
        key: ${{ secrets[format('SSH_PRIVATE_KEY_{0}', inputs.environment)] }}
        port: ${{ secrets[format('SFTP_PORT_{0}', inputs.environment)] || '22' }}
        script: |
          cd ${{ secrets[format('MAGENTO_ROOT_PATH_{0}', inputs.environment)] }}
          
          # Check if module files exist
          if [ -d "${{ env.MODULE_PATH }}" ]; then
            echo "‚úÖ Module directory exists"
            ls -la ${{ env.MODULE_PATH }}
          else
            echo "‚ùå Module directory not found"
            exit 1
          fi
          
          # Check if module is enabled
          if bin/magento module:status ${{ env.MODULE_NAME }} | grep -q "enabled"; then
            echo "‚úÖ Module is enabled"
          else
            echo "‚ùå Module is not enabled"
            exit 1
          fi
          
          # Check if API files exist
          if [ -f "${{ env.MODULE_PATH }}/Model/Api.php" ]; then
            echo "‚úÖ API model exists"
          else
            echo "‚ùå API model not found"
            exit 1
          fi
          
    - name: Notify Deployment Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ Deployment to ${{ inputs.environment }} successful!"
          echo "Module deployed to: ${{ secrets[format('SFTP_HOST_{0}', inputs.environment)] }}${{ secrets[format('MAGENTO_ROOT_PATH_{0}', inputs.environment)] }}/${{ env.MODULE_PATH }}"
          echo "Branch: ${{ inputs.branch }}"
        else
          echo "‚ùå Deployment to ${{ inputs.environment }} failed!"
          exit 1
        fi
